name: Manage Pull Request Labels

on:
  schedule:
    - cron: '0 * * * *'  # Runs every hour
  pull_request_review:
    types: [submitted]

jobs:
  conditionally-label-prs-as-stale:
    runs-on: ubuntu-latest
    steps:
      - name: Handle Stale Pull Requests
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const staleLabels = {
              '24hr': 'stale-24hr',
              '48hr': 'stale-48hr',
              '3days': 'stale-more-than-3-days'
            };

            const isWeekend = (date) => {
              const dayOfWeek = date.getDay();
              return dayOfWeek === 0 || dayOfWeek === 6;
            };

            const getElapsedHours = (startDate, endDate) => {
              let hours = 0;
              let currentDate = new Date(startDate);

              while (currentDate < endDate) {
                if (!isWeekend(currentDate)) {
                  hours++;
                }
                currentDate.setHours(currentDate.getHours() + 1);
              }

              return hours;
            };

            const { data: pullRequests } = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              sort: 'updated',
              direction: 'desc',
              per_page: 100
            });

            for (const pr of pullRequests) {
              if (pr.draft) {
                console.log(`Skipping PR #${pr.number} because it is in draft status`);
                continue;
              } 
            
              const updatedAt = new Date(pr.updated_at);
              const now = new Date();
              const elapsedHours = getElapsedHours(updatedAt, now);

              for (const [threshold, label] of Object.entries(staleLabels)) {
                const thresholdHours = threshold === '3days' ? 72 : parseInt(threshold);
                const hasLabel = pr.labels.some(l => l.name === label);

                if (elapsedHours >= thresholdHours && !hasLabel) {
                  await github.rest.issues.addLabels({
                    issue_number: pr.number,
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    labels: [label]
                  });
                  console.log(`Added ${label} to PR #${pr.number}`);
                } else if (elapsedHours < thresholdHours && hasLabel) {
                  await github.rest.issues.removeLabel({
                    issue_number: pr.number,
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    name: label
                  });
                  console.log(`Removed ${label} from PR #${pr.number}`);
                }
              }
            }

      - name: Handle Pull Requests Awaiting Review
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const awaitingReviewLabel = 'awaiting-review';
            const twoHoursAgo = new Date(Date.now() - 2 * 60 * 60 * 1000);

            const { data: pullRequests } = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              sort: 'created',
              direction: 'desc',
              per_page: 100
            });

            for (const pr of pullRequests) {
              const createdAt = new Date(pr.created_at);
              const reviewSubmitted = await github.rest.pulls.listReviews({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: pr.number,
                per_page: 1
              });

              if (createdAt < twoHoursAgo && reviewSubmitted.data.length === 0) {
                const hasLabel = pr.labels.some(label => label.name === awaitingReviewLabel);

                if (!hasLabel) {
                  await github.rest.issues.addLabels({
                    issue_number: pr.number,
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    labels: [awaitingReviewLabel]
                  });
                  await github.rest.pulls.requestReviewers({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    pull_number: pr.number,
                    reviewers: ['Depeche Code']
                  });
                  console.log(`Added ${awaitingReviewLabel} to PR #${pr.number} and assigned review to @DepecheCode`);
                }
              }
            }

      - name: Handle Pull Requests Awaiting Developer Response
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const awaitingResponseLabel = 'awaiting-developer-response';
            const oneDayAgo = new Date(Date.now() - 24 * 60 * 60 * 1000);

            const { data: pullRequests } = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              sort: 'updated',
              direction: 'desc',
              per_page: 100
            });

            for (const pr of pullRequests) {
              const reviewSubmitted = await github.rest.pulls.listReviews({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: pr.number,
                per_page: 1
              });

              if (reviewSubmitted.data.length > 0) {
                const lastReviewSubmittedAt = new Date(reviewSubmitted.data[0].submitted_at);
                const lastPRUpdatedAt = new Date(pr.updated_at);

                if (lastReviewSubmittedAt < oneDayAgo && lastReviewSubmittedAt > lastPRUpdatedAt) {
                  const hasLabel = pr.labels.some(label => label.name === awaitingResponseLabel);

                  if (!hasLabel) {
                    await github.rest.issues.addLabels({
                      issue_number: pr.number,
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      labels: [awaitingResponseLabel]
                    });
                    console.log(`Added ${awaitingResponseLabel} to PR #${pr.number}`);
                  }
                } else {
                  const hasLabel = pr.labels.some(label => label.name === awaitingResponseLabel);

                  if (hasLabel) {
                    await github.rest.issues.removeLabel({
                      issue_number: pr.number,
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      name: awaitingResponseLabel
                    });
                    console.log(`Removed ${awaitingResponseLabel} from PR #${pr.number}`);
                  }
                }
              }
            }

      - name: Remove Awaiting Review Label on Review Submission
        if: github.event_name == 'pull_request_review' && github.event.action == 'submitted'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const awaitingReviewLabel = 'awaiting-review';
            const pullRequest = context.payload.pull_request;

            const hasLabel = pullRequest.labels.some(label => label.name === awaitingReviewLabel);

            if (hasLabel) {
              await github.rest.issues.removeLabel({
                issue_number: pullRequest.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                name: awaitingReviewLabel
              });
              console.log(`Removed ${awaitingReviewLabel} from PR #${pullRequest.number}`);
            }