name: run-quality-checks
run-name: Run Quality Checks

on:
  workflow_call:

jobs:
  codeScanner:
    # This step
    name: Run Salesforce Code Scanner
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/department-of-veterans-affairs/va-teams/bah-salesforce-ci:latest
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.github_token }}
    steps:
      # Because we're checking out the code into a virtual FS layer in a docker container, we have to mark this directory as safe for git to work in.
      - name: 'add safe directory'
        run: |
          git config --global --add safe.directory /__w/va-teams/va-teams
      # Checkout the source. Note we're also setting the safe directory here.
      - uses: actions/checkout@v4
        with:
          set-safe-directory: '/__w/va-teams/va-teams/*'
      # Cache node_modules to speed up the process
      - name: 'Restore node_modules cache'
        id: cache-npm
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            .volta
          key: npm-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            npm-${{ env.cache-name }}-
            npm-
      # Install npm dependencies for the Salesforce Scanner.
      # Note, 9 times out of 10, this is super quick, because the cache restores our node_modules.
      # Note, we could switch to bun, but the speed improvement is minimal after accounting for installation cost.
      - name: 'Install npm dependencies'
        if: steps.cache-npm.outputs.cache-hit != 'true'
        run: HUSKY=0 npm ci
      # Install the Salesforce Scanner plugin - normally this is done at the docker image level, but we're doing it here to use the beta.
      - name: Install sf scanner plugin
        run: sf plugins install @salesforce/sfdx-scanner@latest-beta
      # Install the Lightning Flow Scanner
      - name: Install the Lightning Flow Scanner
        run: echo y | sf plugins install lightning-flow-scanner
      # We have two custom jar files that contain custom PMD rules that the scanner needs. We register them here, so that the scanner can use them.
      - name: Register custom Jars
        run: |
          sf scanner rule add -l "apex" -p "pmd/bah-pmd-rules-apex-1.0.jar"
      # Execute the scanner via the sfdx-scan-pull-request plugin. This will scan the code and post comments on the PR.
      # The bulk of the work in this job is done by this step.
      - name: Run Salesforce Scanner
        uses: codefriar/sfdx-scan-pull-request@v2.9.127
        with:
          engine: 'pmd,eslint-lwc'
          pmdconfig: main.xml
          report-mode: 'comments'
          eslintconfig: force-app/main/default/lwc/.eslintrc.json
          severity-threshold: 4
          delete-resolved-comments: true
          # These are net-new options.
          max-number-of-comments: 100 # if there are more violations found than this number, the action will upload the report as an artifact instead of posting comments
          comment-batch-size: 15 # this is the number of comments to post at a time
          rate-limit-wait-time: 60000 # in milliseconds, ie: 1 minute. this is the delay between comment batches
          debug: true #enable debug mode? defaults to false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}