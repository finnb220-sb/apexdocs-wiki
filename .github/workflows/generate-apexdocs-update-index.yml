# Github Workflow for building and deploying a VitePress site to GitHub Pages
#
name: Generate ApexDocs and Update GH Pages Index to support versioning

on:
  # Runs on pushes targeting the `master` and all release branches.Feel free to add other
  # branch name(s) for which you wish to generate versioned ApexDoc documentation ( ie feature).
  push:
    branches: ["master", "main", "release/*"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: pages
  cancel-in-progress: false


jobs:
  generate-apexdocs-to-static-site:
    runs-on: ubuntu-latest
    if: ${{ github.event.action != 'synchronize' || (github.event.action == 'synchronize' && vars.TESTING_WF_ACTION == 'true') }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install

      - name: Compile Typescript
        run: |
          bun build --target node .github/workflows/lib/ApexDocContentManager.ts --outfile .github/workflows/lib/ApexDocContentManager.js

      - uses: actions/github-script@v7
        continue-on-error: true
        name: Generate & Publish ApexDoc
        id: exec
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const path = require('path')
            const file = '.github/workflows/lib/ApexDocContentManager.js'
            // Import the module (ts file) and generate the ApexDocs
            const apexDocContentManager = await import('${{ github.workspace }}/${{ file }}');
            if (apexDocContentManager) {
              console.log('======> Generating ApexDoc');
              // For some reason, I cannot access the target branch from within the apexDocContentManager context so passing it in.
              const targetBranch = '${{ github.base_ref}}';
              await apexDocContentManager.default({github, context, core, targetBranch});
              console.log('=====> results = ${{steps.exec.outputs.result}}');
            } else {
              throw new Error('The module could not be loaded, or does not have a run method')
            }