name: Daily PR Report

on:
  schedule:
    - cron: '0 12 * * *'  # Runs at 8:00 AM Eastern Time (12:00 UTC)
  workflow_dispatch:  # Allows manual triggering

jobs:
  generate-pr-report:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Generate PR Report
        uses: actions/github-script@v7
        env:
          TEAMS_WEBHOOK_URL: ${{ secrets.TEAMS_WEBHOOK_URL }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const https = require('https');
            
            const query = `
            query($owner: String!, $repo: String!, $cursor: String) {
              repository(owner: $owner, name: $repo) {
                pullRequests(first: 100, states: [OPEN], after: $cursor) {
                  pageInfo {
                    hasNextPage
                    endCursor
                  }
                  nodes {
                    number
                    title
                    createdAt
                    changedFiles
                    state
                    isDraft
                    reviewDecision
                    author {
                      login
                    }
                    reviews(first: 100) {
                      nodes {
                        state
                        author {
                          login
                        }
                      }
                    }
                    reviewThreads(first: 100) {
                      nodes {
                        isResolved
                        comments(last: 1) {
                          nodes {
                            createdAt
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            `;
            
            const approvers = ['initdotd', 'codefriar', 'PastranaDigital', 'bfinngoaldc', 'jweltCQ', 'justinstroudbah'];
            
            async function fetchAllPRs() {
              let allPRs = [];
              let hasNextPage = true;
              let cursor = null;
            
              while (hasNextPage) {
                const result = await github.graphql(query, {
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  cursor: cursor,
                });
            
                allPRs = allPRs.concat(result.repository.pullRequests.nodes);
                hasNextPage = result.repository.pullRequests.pageInfo.hasNextPage;
                cursor = result.repository.pullRequests.pageInfo.endCursor;
              }
            
              return allPRs;
            }
            
            function extractJiraTicket(title) {
              const match = title.match(/^([A-Z]{4,}-\d{4,})/);
              return match ? match[1] : 'N/A';
            }
            
            function formatDate(date) {
              return date.toISOString().split('T')[0];
            }
            
            function timeSince(date) {
              const seconds = Math.floor((new Date() - date) / 1000);
              let interval = seconds / 86400;
              if (interval > 2) {
                return Math.floor(interval) + 'd';
              }
              interval = seconds / 3600;
              if (interval > 1) {
                return Math.floor(interval) + 'h';
              }
              return Math.floor(seconds / 60) + 'm';
            }
            
            function processData(prs) {
              return prs
                .filter(pr => !pr.isDraft)
                .map(pr => {
                  const reviewDecision = (() => {
                    const changesRequested = pr.reviews.nodes.filter(r => r.state === 'CHANGES_REQUESTED').length;
                    const approvedCount = pr.reviews.nodes.filter(r => r.state === 'APPROVED' && approvers.includes(r.author.login)).length;
                    if (changesRequested > 0) return 'CHANGES_REQUESTED';
                    if (approvedCount >= 2) return 'APPROVED';
                    return 'REVIEW_REQUIRED';
                  })();
            
                  const approvedReviews = pr.reviews.nodes.filter(r => r.state === 'APPROVED' && approvers.includes(r.author.login));
                  const approvedBy = [...new Set(approvedReviews.map(r => r.author.login))].join(', ') || 'N/A';
            
                  const unresolvedReviewComments = pr.reviewThreads.nodes.filter(t => !t.isResolved).length;
                  const latestUnresolvedComment = pr.reviewThreads.nodes
                    .filter(t => !t.isResolved)
                    .flatMap(t => t.comments.nodes)
                    .map(c => new Date(c.createdAt))
                    .sort((a, b) => b - a)[0];
            
                  const timeSinceLastReviewComment = latestUnresolvedComment
                    ? timeSince(latestUnresolvedComment)
                    : '';
            
                  const stale = latestUnresolvedComment && (new Date() - latestUnresolvedComment) / (1000 * 60 * 60) > 48;
            
                  return {
                    number: pr.number,
                    jiraTicket: extractJiraTicket(pr.title),
                    title: pr.title,
                    author: pr.author.login,
                    changedFiles: pr.changedFiles,
                    state: pr.state,
                    reviewDecision,
                    approvedReviews: approvedReviews.length,
                    approvedBy,
                    unresolvedReviewComments,
                    timeSinceLastReviewComment,
                    stale: stale ? 'stale' : '',
                    createdAt: formatDate(new Date(pr.createdAt)),
                  };
                });
            }
            
            function generateTeamsCard(data) {
              const prItems = data.map(pr => ({
                type: "FactSet",
                facts: [
                  { title: "PR", value: `[#${pr.number}](https://github.com/${context.repo.owner}/${context.repo.repo}/pull/${pr.number})` },
                  { title: "Jira", value: pr.jiraTicket },
                  { title: "Title", value: pr.title },
                  { title: "Author", value: pr.author },
                  { title: "Files", value: pr.changedFiles.toString() },
                  { title: "State", value: pr.state },
                  { title: "Review", value: pr.reviewDecision },
                  { title: "Approvals", value: pr.approvedReviews.toString() },
                  { title: "Approved By", value: pr.approvedBy },
                  { title: "Unresolved", value: pr.unresolvedReviewComments.toString() },
                  { title: "Last Comment", value: pr.timeSinceLastReviewComment },
                  { title: "Stale", value: pr.stale },
                  { title: "Created", value: pr.createdAt }
                ]
              }));
            
              return {
                type: "AdaptiveCard",
                $schema: "http://adaptivecards.io/schemas/adaptive-card.json",
                version: "1.2",
                body: [
                  {
                    type: "TextBlock",
                    text: "Daily PR Report",
                    weight: "bolder",
                    size: "medium"
                  },
                  {
                    type: "TextBlock",
                    text: `Total PRs: ${data.length}`,
                    weight: "bolder"
                  },
                  ...prItems
                ]
              };
            }
            
            function sendToTeams(card) {
              return new Promise((resolve, reject) => {
                const message = {
                  type: "message",
                  attachments: [
                    {
                      contentType: "application/vnd.microsoft.card.adaptive",
                      contentUrl: null,
                      content: card
                    }
                  ]
                };
            
                const requestBody = JSON.stringify(message);
            
                const req = https.request(process.env.TEAMS_WEBHOOK_URL, {
                  method: 'POST',
                  headers: {
                    'Content-Type': 'application/json',
                    'Content-Length': Buffer.byteLength(requestBody)
                  }
                }, (res) => {
                  console.log('Response status:', res.statusCode);
                  console.log('Response headers:', JSON.stringify(res.headers));
            
                  let data = '';
                  res.on('data', (chunk) => {
                    data += chunk;
                  });
                  res.on('end', () => {
                    console.log('Response body:', data);
                    if (res.statusCode >= 200 && res.statusCode < 300) {
                      resolve(data);
                    } else {
                      reject(new Error(`HTTP status code ${res.statusCode}: ${data}`));
                    }
                  });
                });
            
                req.on('error', (error) => {
                  console.error('Error sending request:', error);
                  reject(error);
                });
            
                req.write(requestBody);
                req.end();
              });
            }
            
            async function main() {
              try {
                console.log('Fetching PRs...');
                const allPRs = await fetchAllPRs();
                console.log(`Fetched ${allPRs.length} total PRs`);
            
                const nonDraftPRs = allPRs.filter(pr => !pr.isDraft);
                console.log(`Filtered out ${allPRs.length - nonDraftPRs.length} draft PRs`);
            
                console.log('Processing non-draft PR data...');
                const processedData = processData(nonDraftPRs);
                console.log(`Processed ${processedData.length} non-draft PRs`);
            
                const card = generateTeamsCard(processedData);
            
                console.log('Sending report to Teams...');
                await sendToTeams(card);
                console.log('PR report sent to Teams successfully');
            
              } catch (error) {
                console.error('Error in main function:', error);
                core.setFailed(error.message);
              }
            }
            
            await main();