name: HealthCheck-DeployTestAndCheck
run-name: Health Check - Deploy Test and Check

on:
  # workflow_call allows this workflow to be called from another workflow. Ie: this becomes a re-usable workflow/action
  # in this case, we're calling this workflow from the Daily-PMD-Test-run.yml workflow. This allows us to re-use the same
  # logic in multiple places. (or in this case, execute multiple runs of this workflow with different inputs in parallel)
  workflow_call:
    inputs:
      commitRef:
        description: 'The git commit ref to deploy'
        required: true
        type: string
  # Workflow_dispatch allows this workflow to be manually triggered from the GitHub web UI
  workflow_dispatch:
    inputs:
      commitRef:
        description: 'The git commit ref to deploy'
        required: true
        type: string

jobs:
  # This job is delegated to the ENV-Determine-deployment-env.yml file.
  DetermineSFDeploymentEnvironment:
    uses: ./.github/workflows/ENV-Determine-deployment-env.yml
    secrets: inherit
    with:
      original_event: 'push' # we're overriding GitHub's internal understanding of the triggering event type here, because it
      # needs to be treated as a push event for the purposes of determining the deployment environment.
  checkoutAndSetup:
    needs: DetermineSFDeploymentEnvironment
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/department-of-veterans-affairs/va-teams/bah-salesforce-ci:latest
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.github_token }}
    env:
      AUTH_SECRET_NAME: ${{ needs.DetermineSFDeploymentEnvironment.outputs.AUTH_SECRET_NAME }}
    steps:
      # Checkout the source code. This is required to check out the code inside a docker container.
      - name: 'add safe directory'
        run: |
          git config --global --add safe.directory /__w/va-teams/va-teams
      # Checkout the source. Note we're also setting the safe directory here.
      - name: 'Checkout source code'
        uses: actions/checkout@v4.1.7
        with:
          set-safe-directory: '/__w/va-teams/va-teams'
          ref: ${{ github.event.inputs.commitRef }}
      - name: write Authfile
        env:
          AUTH_SECRET_VALUE: ${{ secrets[env.AUTH_SECRET_NAME] }}
        run: |
          echo "Using $AUTH_SECRET_NAME as the Secret Name"
          if [ -z "$AUTH_SECRET_VALUE" ]; then
            echo "GitHub secret ${AUTH_SECRET_NAME} is empty or not set. Exiting..."
            exit 1
          else
            echo "GitHub secret ${AUTH_SECRET_NAME} was found. Writing to auth.txt."
            echo "${AUTH_SECRET_VALUE}" > auth.txt
          fi
      # Authenticate to the selected org
      - name: Auth with Stage
        run: 'sf force auth sfdxurl store -f auth.txt -a stage -d'
      # The sgd "source delta" command generates a delta between two git commits. In this case, we're comparing the commitRef passed into
      # this workflow via either call or dispatch with the previous commit(s). This will allow us to determine what changes have been made
      # in since we last deployed.
      #
      # NOTE: We want to move away from this, and the use of existing orgs in general.
      # This nightly job should be our first to use scratch orgs.
      #
      # There is a (limited) risk that multiple commits will exist between the passed in CommitRef and the last commit in the stage org.
      #
      - name: Generate Deployment Delta
        run: |
          sf sgd source delta -t="HEAD" -f="HEAD~1" -o "." --loglevel=debug
      - name: Set SF default options
        run: sf config set org-metadata-rest-deploy true --global
      # This is the crux of this test job. We're going to deploy the changes in this PR to the stage org.
      - name: Deploy to Stage and run Tests (Check Only)
        shell: bash
        run: |
          sf project deploy start --verbose --dry-run -x package/package.xml --target-org stage --ignore-conflicts --wait 120 --test-level RunLocalTests --coverage-formatters json

      # Determines if the code coverage report exists. If it does, we'll generate a nice markdown comment with the results.
      - name: Generate and post coverage table
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const path = 'coverage/coverage/coverage.json';

            if (fs.existsSync(path)) {
              const coverageData = JSON.parse(fs.readFileSync(path, 'utf8'));
              let tableRows = [];
              let totalCovered = 0;
              let totalLines = 0;

              for (const [className, data] of Object.entries(coverageData)) {
                const covered = Object.values(data.s).filter(count => count > 0).length;
                const uncovered = Object.values(data.s).filter(count => count === 0).length;
                const percentage = ((covered / (covered + uncovered)) * 100).toFixed(2);
                const checkMark = percentage >= 85 ? '✅' : '❌';
                const workingClassName = className.split('/').at(-1);
                tableRows.push(`| ${workingClassName} | ${covered}/${uncovered} | ${percentage}% | ${checkMark} |`);
                totalCovered += covered;
                totalLines += covered + uncovered;
              }

              const aggregatePercentage = ((totalCovered / totalLines) * 100).toFixed(2);
              const aggregateCheckMark = aggregatePercentage > 85 ? '✅' : '❌';
              tableRows.push(`| Aggregate | ${totalCovered}/${totalLines - totalCovered} | ${aggregatePercentage}% | ${aggregateCheckMark} |`);
              const table = `
              | Class Name | Covered/Uncovered Lines | Coverage Percentage | >=85% Coverage |
              |------------|-------------------------|---------------------|------|
              ${tableRows.join('\n')}
              `;
              const badge = `![Code Coverage](https://img.shields.io/badge/Code%20Coverage-${aggregatePercentage}%25-${aggregatePercentage >= 85 ? 'brightgreen' : 'red'})`;
              const commentHeader = '### Code Coverage';
              const commentBody = `${commentHeader}\n\n${table}\n\n${badge}`;
              const comments = await github.rest.issues.listComments({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
              });
              const existingComment = comments.data.find(comment => comment.body.startsWith(commentHeader));
              if (existingComment) {
                await github.rest.issues.updateComment({
                  comment_id: existingComment.id,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: commentBody,
                });
              } else {
                  await github.rest.issues.createComment({
                  issue_number: context.issue.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: commentBody,
                });
              }
              if (aggregatePercentage < 85) {
                core.setFailed('Aggregate code coverage is below 85%');
              }
            } else {
              console.log(`Coverage file not found at path: ${path}`);
            }
      # This step is responsible for uploading the code coverage report as an artifact. This will allow us to download the code coverage report from the GitHub UI.
      - name: Upload Coverage Report
        uses: actions/upload-artifact@v4
        with:
          name: code-coverage
          path: |
            code-coverage-results.md
            coverage/coverage/coverage.json
          retention-days: 5
  PMDChecks:
    runs-on: ubuntu-latest
    container: # We're using the official Salesforce provided docker image with the pre-installed Salesforce CLI
      image: salesforce/cli:latest-full # There is minimal, but non-zero risk here, as SF can (has) broken the CLI in the past
    steps:
      # Checkout the source code. This is required to check out the code inside a docker container.
      - name: 'add safe directory'
        run: |
          git config --global --add safe.directory /__w/va-teams/va-teams
      # Checkout the source. Note we're also setting the safe directory here.
      - name: 'Checkout source code'
        uses: actions/checkout@v4.1.7
        with:
          set-safe-directory: '/__w/va-teams/va-teams'
          fetch-depth: ${{ github.event_name == 'pull_request' && 2 || 0 }} # either 2 or 0
      - name: 'Execute SF Scanner'
        run: |
          sf scanner rule add -l "apex" -p "pmd/bah-pmd-rules-apex-1.0.jar"
          sf scanner run --engine pmd --pmdconfig main.xml --format csv --outfile SalesforceCodeScanResults.csv --target force-app/main/default/