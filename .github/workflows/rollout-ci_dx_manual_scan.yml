# Unique name for this workflow
name: Repository Scan (DX)

run-name: ${{ github.ref_name }} manual scan by @${{ github.actor }}

on:
  workflow_dispatch:
    inputs:
      minimum_severity:
        required: true
        type: choice
        description: Minimum Severity (defaults to 5 - show all violations)
        default: '5'
        options:
          - 5
          - 4
          - 3
          - 2
          - 1
      sca_engine:
        required: true
        type: choice
        description: SCA Engine
        default: 'PMD'
        options:
          - PMD
          - CodeScan

env:
  SONAR_SCANNER_VERSION: 5.0.1.3006

jobs:
  scan-pmd-manual:
    name: PMD
    if: ${{ github.event.inputs.sca_engine == 'PMD' }}
    permissions:
      contents: read # for actions/checkout to fetch code
    outputs:
      filename: ${{ steps.set_filename.outputs.filename }}
      violation_count: ${{ steps.evaluate_violations.outputs.violation_count }}
    runs-on: ubuntu-latest

    steps:
      # Checkout the source code
      - name: 'Checkout source code'
        uses: actions/checkout@v4

      - name: 'Set Filename'
        id: set_filename
        run: echo "filename=${{ github.event.repository.name }}_$(date --utc +%Y%m%d_%H%M%SZ)" >> $GITHUB_OUTPUT

      # Install PMD
      - name: 'Install PMD'
        id: pmd
        run: |
          PMD_VERSION=$(curl -s https://api.github.com/repos/pmd/pmd/releases/latest | grep '.tag_name' | sed 's:.*/::' | sed 's:",::')
          echo $PMD_VERSION
          if [ ! -f "./pmd-dist-$PMD_VERSION-bin.zip" ]; then 
            wget -q https://github.com/pmd/pmd/releases/download/pmd_releases%2F$PMD_VERSION/pmd-dist-$PMD_VERSION-bin.zip
            unzip -q pmd-dist-$PMD_VERSION-bin.zip -d ~
            mv ~/pmd-bin-$PMD_VERSION ~/pmd
            ~/pmd/bin/pmd --version
          fi

      - name: 'Run PMD scan to CSV - All violations'
        id: pmd_csv_all
        run: |
          rm -f .pmdCache 
          ~/pmd/bin/pmd check --dir . --rulesets config/dtc_pmd_ruleset.xml --format csv --report-file ${{ steps.set_filename.outputs.filename }}.csv --no-cache --no-progress --no-fail-on-violation --no-fail-on-error --property package=false --property ruleSet=false --property problem=false --minimum-priority "${{ github.event.inputs.minimum_severity }}"

      - name: Evaluate Errors
        id: evaluate_violations
        run: |
          violation_count=$(wc -l ${{ steps.set_filename.outputs.filename }}.csv|awk '{print $1}')
          echo $violation_count
          violation_count=$((violation_count - 1))
          echo "violation_count=$violation_count" >> $GITHUB_OUTPUT
          echo "VIOLATIONS FOUND: " $violation_count # Print to console
          if [[ $violation_count > 0 ]]; then
            VIOLATIONS_STRING="$violation_count Scanning Violations Detected"
            echo "::error::$VIOLATIONS_STRING"
          elif [[ $violation_count == 0 ]]; then
            echo "::notice::No Violations Detected"
          fi

      - name: Priority to Severity
        run: sed -i 's|"Priority"|"Severity"|g' ${{ steps.set_filename.outputs.filename }}.csv

      - name: Read CSV
        id: csv_code
        uses: juliangruber/read-file-action@v1
        with:
          path: ./${{ steps.set_filename.outputs.filename }}.csv

      - name: Create MD
        uses: petems/csv-to-md-table-action@master
        id: csv_table_output_apex
        with:
          csvinput: ${{ steps.csv_code.outputs.content }}

      - name: Show Table
        run: |
          echo "## All Violations" >> $GITHUB_STEP_SUMMARY
          echo "${{steps.csv_table_output_apex.outputs.markdown-table}}" >> $GITHUB_STEP_SUMMARY

      - name: Upload all violations file in CSV format
        if: ${{ steps.evaluate_violations.outputs.violation_count > 0 }}
        uses: actions/upload-artifact@v4
        with:
          path: ${{ steps.set_filename.outputs.filename }}.csv
          name: ${{ steps.set_filename.outputs.filename }}_PMD
          compression-level: 0

  scan-codescan-manual:
    name: CodeScan
    if: ${{ github.event.inputs.sca_engine == 'CodeScan' }}
    permissions:
      contents: read # for actions/checkout to fetch code
    runs-on: ubuntu-latest
    env:
      JAVA_TOOL_OPTIONS: '-Xmx8g'

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Cache files
        uses: actions/cache@v4
        with:
          path: |
            ~/.sonar
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Run Codescan
        uses: codescan-io/codescan-scanner-action@1.6
        with:
          organization: ${{ vars.AUTORABIT_CODESCAN_ORGANIZATION }}
          projectKey: ${{ vars.AUTORABIT_CODESCAN_PROJECT_KEY }}
          login: ${{ secrets.AUTORABIT_CODESCAN_TOKEN }}
          codeScanUrl: ${{ vars.AUTORABIT_CODESCAN_URI }}
          failOnRedQualityGate: false
          scanChangedFilesOnly: false
          generateSarifFile: false
          generateReportFile: false
          args: |
            sonar.verbose=true
            sonar.token=${{ secrets.AUTORABIT_CODESCAN_TOKEN }}
            sonar.scm.provider=git
            sonar.scm.disabled=false
            sonar.projectName=${{ github.event.repository.name }}
            sonar.java.binaries=target
            sonar.exclusions=${{ vars.CODESCAN_SONAR_EXCLUSIONS }}
            sonar.analysisCache.enabled=false
            sf.sfmeta.suffixes=${{ vars.CODESCAN_SF_SFMETA_SUFFIXES }}
            codescan.suppressUnitTestViolations=false
            codescan.comparison.branches=${{ vars.CODESCAN_COMPARISON_BRANCHES }}
            codescan.cloud.packageTypes=${{ vars.CODESCAN_CLOUD_PACKAGETYPES }}
            sonar.branch.name=${{ github.ref_name }}
