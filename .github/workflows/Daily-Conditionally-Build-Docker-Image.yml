name: daily-conditionally-build-docker-image
run-name: (Daily) Build our custom CI docker image, if the base salesforce/cli image has been updated.

on:
  schedule:
    - cron: '0 6 * * *'  # Run at 2am Eastern Time every day (6am UTC)
  workflow_dispatch:  # Allow manual trigger

env:
  BASE_IMAGE: salesforce/cli:latest-full
  IMAGE_NAME: bah-salesforce-ci

jobs:
  build-image:
    runs-on: ubuntu-latest
    steps:
      # This step pulls the latest version of the Salesforce CLI Image from Docker Hub
      # We have to pull this image in order to inspect the image to discover it's true 'version' (as opposed to the latest tag)
      - name: Fetch the latest base version
        run: |
          docker pull ${{ env.BASE_IMAGE }}

      # This step pulls the semantic version of the base image from the image's metadata using jq and an
      # assumption of the image's metadata structure. This is a brittle assumption, but it's the best we have.
      # it's unlikely that the metadata structure will change often, but it's possible. Generally expect it to be stable.
      - name: Check for new base image version
        id: check_version
        shell: bash
        run: |
          BASE_VERSION=$(docker inspect salesforce/cli:latest-full | jq -r '.[].Config.Labels."org.opencontainers.image.version"')
          # Parse the version string into parts
          MAJOR=$(echo $BASE_VERSION | cut -d'.' -f1)
          MINOR=$(echo $BASE_VERSION | cut -d'.' -f2)
          PATCH=$(echo $BASE_VERSION | cut -d'.' -f3)
          echo "major=$MAJOR" >> $GITHUB_OUTPUT
          echo "minor=$MINOR" >> $GITHUB_OUTPUT
          echo "patch=$PATCH" >> $GITHUB_OUTPUT
          echo "SEMVER=$MAJOR.$MINOR.$PATCH" >> $GITHUB_OUTPUT
          echo $MAJOR $MINOR $PATCH
      # Set the env variable that determines if we should continue building the image. This encapsulates the logic of running
      # the build only if the base image version has changed OR if the event is a pull_request.
      # This is a no-op if the version of the base image hasn't changed and if the event is not a pull_request.
      - name: Set continue flag
        id: continueBuild
        run: |
          if [[ "${{ steps.check_version.outputs.SEMVER }}" != "${{ vars.BAH_SF_CI_DOCKER_IMAGE_VERSION }}" || "${{ github.event_name }}" == "pull_request" ]]; then
            echo "Setting continue to true, because either the base image version has changed or the event is a pull_request."
            echo "continue=true" >> $GITHUB_OUTPUT
          else
            echo "Setting continue to false, because the base image version has not changed and the event is not a pull_request."
            echo "continue=false" >> $GITHUB_OUTPUT
          fi
      # This step is conditional on the base image version derived above being different from the version we stored in
      # this Repository's Action Variable named BAH_SF_CI_DOCKER_IMAGE_VERSION. If the versions are the same, we skip the remaining steps.
      # Basic code-checkout step. This is a no-op if the version of the base image hasn't changed.
      # Gives us access to the dockerfile
      - name: Checkout code
        if: steps.continueBuild.outputs.continue
        uses: actions/checkout@v4

      - name: 'Login to GitHub Container Registry'
        if: steps.continueBuild.outputs.continue
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{github.actor}}
          password: ${{secrets.GITHUB_TOKEN}}

      # Responsible for actually building the docker image.
      # This step is conditional on the base image version derived above being different from the version we stored after the last run.
      # While most of the work of this step is in the dockerfile itself, we do need to pass in the base, as well as the version info for
      # Volta and what Node (Major) version we want to use.
      # This step could also use some refinement, as the generated image is 2.5GB, which is quite a big larger than the ~1.2 gb of the base image.
      - name: Build and push Docker image
        if: steps.continueBuild.outputs.continue
        shell: bash
        run: |
          echo "Building image with version ${{ steps.check_version.outputs.major}}.${{ steps.check_version.outputs.minor}}.${{ steps.check_version.outputs.patch}}"
          
          # Build the new image
          docker build --no-cache \
            --build-arg BASE_IMAGE=${{ env.BASE_IMAGE }} \
            --build-arg VOLTA_VERSION=latest \
            --build-arg NODE_VERSION=18 \
            -t ghcr.io/department-of-veterans-affairs/va-teams/${{ env.IMAGE_NAME }}:${{ steps.check_version.outputs.major}}.${{ steps.check_version.outputs.minor}}.${{ steps.check_version.outputs.patch}} \
            -t ghcr.io/department-of-veterans-affairs/va-teams/${{ env.IMAGE_NAME }}:latest \
            -f ./.github/docker/va-teams-custom-ci.dockerfile \
            .
          
          echo "Built image ${{ env.IMAGE_NAME }}:${{ steps.check_version.outputs.major}}.${{ steps.check_version.outputs.minor}}.${{ steps.check_version.outputs.patch}} uploading to GitHub container registry."
                    
          docker push ghcr.io/department-of-veterans-affairs/va-teams/bah-salesforce-ci:latest
          docker push ghcr.io/department-of-veterans-affairs/va-teams/${{ env.IMAGE_NAME }}:${{ steps.check_version.outputs.major}}.${{ steps.check_version.outputs.minor}}.${{ steps.check_version.outputs.patch}}

      # This step updates the Action Variable in the repository with the latest version of the base image.
      - name: Update GH Action Variable to store the latest SEMVER value
        if: steps.continueBuild.outputs.continue
        uses: action-pack/set-variable@v1
        with:
          name: 'BAH_SF_CI_DOCKER_IMAGE_VERSION'
          value: ${{ steps.check_version.outputs.SEMVER }}
          token: ${{ secrets.VARIABLE_UPDATE_PAT }}


