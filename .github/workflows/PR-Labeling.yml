name: Manage Pull Request Milestones and Labels

on:
  pull_request:
    types: [opened, ready_for_review, synchronize, reopened]
  pull_request_review:
    types: [submitted, dismissed]
  workflow_dispatch:

jobs:
  manage-milestones-and-labels:
    runs-on: ubuntu-latest
    steps:
      # Check out the repository
      - name: checkout
        continue-on-error: true
        uses: actions/checkout@v4

      # Sets the assignee of the PR to the Submitter ensuring they get email notificiations for PR updates.
      - name: Set Assignee
        continue-on-error: true
        if: github.event.action == 'opened' || github.event.action == 'reopened'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
          SUBMITTER: ${{ github.actor }}
        run: gh pr edit $PR_NUMBER --assignee $SUBMITTER

      # Sets the milestone of the PR to the branch name if it starts with 'release/'
      - name: Manage PR Milestone
        continue-on-error: true
        if: startsWith(github.event.pull_request.base.ref, 'release/')
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TARGET_BRANCH: ${{ github.event.pull_request.base.ref }}
        run: |
          BRANCH_PREFIX="release/"
          MILESTONE_VERSION="${TARGET_BRANCH#$BRANCH_PREFIX}"
          echo "Milestone to set: $MILESTONE_VERSION"
          # Check if milestone exists
          MILESTONE_ID=$(gh api repos/:owner/:repo/milestones --paginate | jq -r --arg milestone "$MILESTONE_VERSION" '.[] | select(.title == $milestone) | .number')
          if [[ -z "$MILESTONE_ID" ]]; then
            # Create milestone if it doesn't exist
            gh api repos/:owner/:repo/milestones --method POST -F title="$MILESTONE_VERSION"
          fi

          gh pr edit ${{ github.event.pull_request.number }} --milestone "$MILESTONE_VERSION"

      # Reset labels on PRs when they are updated. This allows the action to be idempotent.
      - name: Reset Labels
        continue-on-error: true
        if: github.event.action == 'synchronize' || github.event.action == 'ready_for_review' || github.event.action == 'submitted' || github.event.action == 'dismissed'
        run: |
          PR_NUMBER=${{ github.event.pull_request.number }}
          LABELS=("Ready For Merge" "One Review" "Changes Requested" "Bug" "Feature")

          # Fetch current labels of the PR
          CURRENT_LABELS=$(gh pr view $PR_NUMBER --json labels | jq -r '.labels[].name')

          # Prepare a list of labels to remove
          LABELS_TO_REMOVE=()
          for label in "${LABELS[@]}"; do
            if echo "$CURRENT_LABELS" | grep -q "\<$label\>"; then
              LABELS_TO_REMOVE+=("--remove-label" "$label")
            fi
          done

          # Remove labels in a single call
          if [[ "${#LABELS_TO_REMOVE[@]}" -gt 0 ]]; then
            gh pr edit $PR_NUMBER "${LABELS_TO_REMOVE[@]}"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Label PRs as Bug or Feature based on the branch name
      - name: Label PR as Bug or Feature
        continue-on-error: true
        if: github.event.action == 'opened'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          HEAD_BRANC: ${{ github.event.pull_request.head.ref }}
          PRNUMBER: ${{ github.event.pull_request.number }}
        run: |
          if [[ "$HEAD_BRANCH" == fix/* ]]; then
            gh pr edit $PRNUMBER --add-label "Bug"
          elif [[ "$HEAD_BRANCH" == feature/* ]]; then
            gh pr edit $PRNUMBER --add-label "Feature"
          fi

      # This is the meat of this workflow. This step applies labels to PRs based on reviews.
      # It iterates over a known set of allowed approvers, and looks at their latest review.
      # note: Only the latest review counts. If a reviewer has approved a PR, and then requested changes,
      # the PR will be labeled as "Changes Requested". Once the PR has 2 approvals, it will be labeled as
      # "Ready For Merge". If the PR has only 1 approval, it will be labeled as "One Review". If either
      # reviews have a resolution of 'CHANGES_REQUESTED', the PR will be labeled as "Changes Requested".
      - name: Apply Labels Related To Reviews
        continue-on-error: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REVIEWERS: ${{ vars.APPROVERS_LIST }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
        if: github.event.action == 'synchronize'
        shell: bash
        run: |
          EXISTING_REVIEWS=$(gh pr view $PR_NUMBER --json reviews)
          APPROVED_REVIEWS=0
          CHANGES_REQUESTED=false
          
          declare -A LATEST_REVIEWS
          
          for reviewer in $(echo $REVIEWERS | tr ',' '\n'); do
            LATEST_REVIEWS["$reviewer"]="none"
          done
          
          # for all reviewers in the list, iterate over the reviews and establish a state variable where
          # the state is either APPROVED or CHANGES_REQUESTED and the reviewer is the current reviewer
          # ie: that the reviewer is in the list of approved reviewers. 
          for review in $(echo "$EXISTING_REVIEWS" | jq -c '.reviews[]'); do
            REVIEWER=$(echo "$review" | jq -r '.author.login')
            STATE=$(echo "$review" | jq -r '.state')
            TIMESTAMP=$(echo "$review" | jq -r '.submittedAt')
            
            # Compare review timestamps to track latest review state
            if [[ "${LATEST_REVIEWS["$REVIEWER"]}" == "none" || "$TIMESTAMP" > "${LATEST_REVIEWS["$REVIEWER","timestamp"]}" ]]; then
              LATEST_REVIEWS["$REVIEWER","state"]="$STATE"
              LATEST_REVIEWS["$REVIEWER","timestamp"]="$TIMESTAMP"
            fi
            echo "Latest Reviewer: $REVIEWER, State: ${LATEST_REVIEWS["$REVIEWER","state"]}, Timestamp: ${LATEST_REVIEWS["$REVIEWER","timestamp"]}"
          done
          
          for key in "${!LATEST_REVIEWS[@]}"; do
            echo "Key: $key Value: ${LATEST_REVIEWS[$key]}"
          done
          
          # Count approved reviews and track changes requested state
          for reviewer in "${!LATEST_REVIEWS[@]}"; do
            if [[ "$reviewer" == *",state" ]]; then
              STATE="${LATEST_REVIEWS["$reviewer"]}"
              if [[ "$STATE" == "APPROVED" ]]; then
                APPROVED_COUNT=$((APPROVED_COUNT + 1))
              elif [[ "$STATE" == "CHANGES_REQUESTED" ]]; then
                CHANGES_REQUESTED=true
              fi
            fi
          done
          
          # THERE IS A KNOWN ISSUE HERE. THIS ACTION CAN ONLY ASSIGN LABELS THAT
          # ALREADY EXIST IN THE REPO. REPO ADMINS MUST ADD THE FOLLOWING LABELS
          # TO THE REPO: "Ready For Merge", "One Review", "Changes Requested"
          
          echo "Approved Count: $APPROVED_COUNT"
          
          # if the number of approved reviews is 2, add the Ready For Merge label
          if [[ "$APPROVED_COUNT" -eq 2 ]]; then
            echo "Labeling ready for merge"
            gh pr edit $PR_NUMBER --add-label "Ready For Merge"
          # if the number of approved reviews is 1, add the One Review label
          elif [[ "$APPROVED_COUNT" -eq 1 ]]; then
            echo "Labeling needs one review"
            gh pr edit $PR_NUMBER --add-label "One Review"
          fi
          
          # if there are any changes requested, add the Changes Requested label
          if $CHANGES_REQUESTED; then
            gh pr edit $PR_NUMBER --add-label "Changes Requested"
          fi